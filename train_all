{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"A100","authorship_tag":"ABX9TyOgGXnNYXpV/B+J8+xVI4Pt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D9czE2rwhGlQ","executionInfo":{"status":"ok","timestamp":1754435784992,"user_tz":-60,"elapsed":32069,"user":{"displayName":"zhen lei","userId":"10359431944069673304"}},"outputId":"f3bba624-f4f2-4491-8757-678905bdb81a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","source":["import os\n","import shutil\n","import random\n","\n","# ‰Ω†ÁöÑÊï∞ÊçÆË∑ØÂæÑÔºà‰∏ä‰º†ÂêéÊåÇËΩΩË∑ØÂæÑÔºâ\n","image_dir = '/content/drive/My Drive/train/img'   # ÊâÄÊúâÂéüÂßãÂõæÂÉè\n","mask_dir = '/content/drive/My Drive/train/mask'     # ÊâÄÊúâÂéüÂßãÊé©ËÜú\n","output_base = '/content/drive/My Drive/dataset/'    # ËæìÂá∫Ë∑ØÂæÑ\n","splits = ['train', 'val', 'test']\n","split_ratio = {'train': 0.7, 'val': 0.1, 'test': 0.2}\n","\n","# ÂàõÂª∫ËæìÂá∫ÁªìÊûÑ\n","for split in splits:\n","    os.makedirs(os.path.join(output_base, split, 'images'), exist_ok=True)\n","    os.makedirs(os.path.join(output_base, split, 'masks'), exist_ok=True)\n","\n","# Êî∂ÈõÜÊâÄÊúâÂõæÂÉèÊñá‰ª∂Âêç\n","all_files = sorted([f for f in os.listdir(image_dir) if f.endswith(('.jpg', '.png'))])\n","random.shuffle(all_files)\n","total = len(all_files)\n","\n","# ÂàíÂàÜ\n","train_end = int(split_ratio['train'] * total)\n","val_end = train_end + int(split_ratio['val'] * total)\n","\n","split_files = {\n","    'train': all_files[:train_end],\n","    'val': all_files[train_end:val_end],\n","    'test': all_files[val_end:]\n","}\n","\n","# Â§çÂà∂Êñá‰ª∂Âà∞Êñ∞ÁõÆÂΩï\n","for split, files in split_files.items():\n","    for f in files:\n","        img_src = os.path.join(image_dir, f)\n","        mask_name = f.replace('.jpg', '.png').replace('.jpeg', '.png')\n","        mask_src = os.path.join(mask_dir, mask_name)\n","\n","        shutil.copy(img_src, os.path.join(output_base, split, 'images', f))\n","        shutil.copy(mask_src, os.path.join(output_base, split, 'masks', mask_name))\n","\n","print(\"Êï∞ÊçÆÂàíÂàÜÂÆåÊàêÔºåÂÖ±ËÆ°Ôºö\")\n","for k, v in split_files.items():\n","    print(f\"{k}: {len(v)} Âº†Âõæ\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8edthCXqhP9Y","executionInfo":{"status":"ok","timestamp":1754437600357,"user_tz":-60,"elapsed":1722647,"user":{"displayName":"zhen lei","userId":"10359431944069673304"}},"outputId":"e8f91cd8-1e4c-44d6-d29a-4898620317a1"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Êï∞ÊçÆÂàíÂàÜÂÆåÊàêÔºåÂÖ±ËÆ°Ôºö\n","train: 3971 Âº†Âõæ\n","val: 567 Âº†Âõæ\n","test: 1136 Âº†Âõæ\n"]}]},{"cell_type":"code","source":["# =============================================\n","# üß† Á¨¨‰∫åÊ≠•ÔºöËÆ≠ÁªÉ U-Net Ê®°ÂûãÔºàtrain_unet.pyÔºâ\n","# =============================================\n","import numpy as np\n","import tensorflow as tf\n","import cv2\n","from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Conv2DTranspose, Dropout, concatenate\n","from tensorflow.keras.models import Model\n","from sklearn.model_selection import train_test_split\n","import glob\n","from tqdm import tqdm\n","\n","# ËØªÂèñËÆ≠ÁªÉÂõæÂÉèÂíåÊé©ËÜú\n","train_img_path = '/content/drive/My Drive/dataset/train/images/'\n","train_mask_path = '/content/drive/My Drive/dataset/train/masks/'\n","val_img_path = '/content/drive/My Drive/dataset/val/images/'\n","val_mask_path = '/content/drive/My Drive/dataset/val/masks/'\n","\n","def load_data(img_dir, mask_dir, img_size=(256, 256)):\n","    images, masks = [], []\n","    img_files = sorted(glob.glob(os.path.join(img_dir, '*')))\n","    for img_path in tqdm(img_files):\n","        fname = os.path.basename(img_path)\n","        mask_path = os.path.join(mask_dir, fname.replace('.jpg', '.png'))\n","\n","        img = cv2.imread(img_path)\n","        img = cv2.resize(img, img_size)\n","        img = img / 255.0\n","\n","        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n","        mask = cv2.resize(mask, img_size)\n","        mask = (mask > 127).astype(np.float32)\n","\n","        images.append(img)\n","        masks.append(mask)\n","\n","    return np.array(images), np.array(masks).reshape(-1, img_size[0], img_size[1], 1)\n","\n","x_train, y_train = load_data(train_img_path, train_mask_path)\n","x_val, y_val = load_data(val_img_path, val_mask_path)\n","\n","# ÊûÑÂª∫ U-Net Ê®°Âûã\n","def unet_model(input_size=(256, 256, 3)):\n","    inputs = Input(input_size)\n","\n","    def conv_block(x, filters):\n","        x = Conv2D(filters, 3, activation='relu', padding='same')(x)\n","        x = Conv2D(filters, 3, activation='relu', padding='same')(x)\n","        return x\n","\n","    c1 = conv_block(inputs, 64)\n","    p1 = MaxPooling2D()(c1)\n","    c2 = conv_block(p1, 128)\n","    p2 = MaxPooling2D()(c2)\n","    c3 = conv_block(p2, 256)\n","    p3 = MaxPooling2D()(c3)\n","    c4 = conv_block(p3, 512)\n","    p4 = MaxPooling2D()(c4)\n","    c5 = conv_block(p4, 1024)\n","\n","    u6 = Conv2DTranspose(512, 2, strides=2, padding='same')(c5)\n","    u6 = concatenate([u6, c4])\n","    c6 = conv_block(u6, 512)\n","\n","    u7 = Conv2DTranspose(256, 2, strides=2, padding='same')(c6)\n","    u7 = concatenate([u7, c3])\n","    c7 = conv_block(u7, 256)\n","\n","    u8 = Conv2DTranspose(128, 2, strides=2, padding='same')(c7)\n","    u8 = concatenate([u8, c2])\n","    c8 = conv_block(u8, 128)\n","\n","    u9 = Conv2DTranspose(64, 2, strides=2, padding='same')(c8)\n","    u9 = concatenate([u9, c1])\n","    c9 = conv_block(u9, 64)\n","\n","    outputs = Conv2D(1, 1, activation='sigmoid')(c9)\n","\n","    model = Model(inputs, outputs)\n","    return model\n","\n","model = unet_model()\n","model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# ËÆ≠ÁªÉÊ®°Âûã\n","model.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=8, epochs=20)\n","\n","# ‰øùÂ≠òÊ®°Âûã\n","model.save('/content/drive/My Drive/unet_model.h5')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o3hD6OUQhzoI","executionInfo":{"status":"ok","timestamp":1754439599617,"user_tz":-60,"elapsed":1266007,"user":{"displayName":"zhen lei","userId":"10359431944069673304"}},"outputId":"c0f43f2a-55fc-4f3e-8aa2-25bb19e16ec5"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 3971/3971 [10:18<00:00,  6.42it/s]\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 567/567 [01:15<00:00,  7.54it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m64s\u001b[0m 83ms/step - accuracy: 0.8158 - loss: 0.4387 - val_accuracy: 0.8500 - val_loss: 0.3700\n","Epoch 2/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8411 - loss: 0.3839 - val_accuracy: 0.8499 - val_loss: 0.3827\n","Epoch 3/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8448 - loss: 0.3780 - val_accuracy: 0.8501 - val_loss: 0.3664\n","Epoch 4/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8485 - loss: 0.3694 - val_accuracy: 0.8522 - val_loss: 0.3528\n","Epoch 5/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8461 - loss: 0.3690 - val_accuracy: 0.8523 - val_loss: 0.3619\n","Epoch 6/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8511 - loss: 0.3624 - val_accuracy: 0.8529 - val_loss: 0.3548\n","Epoch 7/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8494 - loss: 0.3605 - val_accuracy: 0.8608 - val_loss: 0.3451\n","Epoch 8/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8532 - loss: 0.3563 - val_accuracy: 0.8631 - val_loss: 0.3400\n","Epoch 9/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8468 - loss: 0.3641 - val_accuracy: 0.8596 - val_loss: 0.3435\n","Epoch 10/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8520 - loss: 0.3553 - val_accuracy: 0.8524 - val_loss: 0.3455\n","Epoch 11/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8551 - loss: 0.3498 - val_accuracy: 0.8587 - val_loss: 0.3466\n","Epoch 12/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8525 - loss: 0.3537 - val_accuracy: 0.8586 - val_loss: 0.3427\n","Epoch 13/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8535 - loss: 0.3524 - val_accuracy: 0.8626 - val_loss: 0.3296\n","Epoch 14/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8523 - loss: 0.3523 - val_accuracy: 0.8631 - val_loss: 0.3325\n","Epoch 15/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8502 - loss: 0.3510 - val_accuracy: 0.8611 - val_loss: 0.3417\n","Epoch 16/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8538 - loss: 0.3475 - val_accuracy: 0.8641 - val_loss: 0.3290\n","Epoch 17/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8563 - loss: 0.3447 - val_accuracy: 0.8638 - val_loss: 0.3314\n","Epoch 18/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8564 - loss: 0.3446 - val_accuracy: 0.8602 - val_loss: 0.3339\n","Epoch 19/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8575 - loss: 0.3403 - val_accuracy: 0.8650 - val_loss: 0.3267\n","Epoch 20/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 52ms/step - accuracy: 0.8553 - loss: 0.3426 - val_accuracy: 0.8656 - val_loss: 0.3272\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]}]},{"cell_type":"code","source":["# üß† Á¨¨‰∏âÊ≠•ÔºöËÆ≠ÁªÉ SegNet Ê®°ÂûãÔºàtrain_segnet.pyÔºâ\n","# =============================================\n","import numpy as np\n","import tensorflow as tf\n","import cv2\n","import glob\n","from tqdm import tqdm\n","from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, Conv2DTranspose, BatchNormalization, Activation, Dense, Reshape\n","from tensorflow.keras.models import Model\n","\n","train_img_path = '/content/drive/My Drive/dataset/train/images/'\n","train_mask_path = '/content/drive/My Drive/dataset/train/masks/'\n","val_img_path = '/content/drive/My Drive/dataset/val/images/'\n","val_mask_path = '/content/drive/My Drive/dataset/val/masks/'\n","\n","def load_data(img_dir, mask_dir, img_size=(256, 256)):\n","    images, masks = [], []\n","    img_files = sorted(glob.glob(img_dir + '*'))\n","    for img_path in tqdm(img_files):\n","        fname = os.path.basename(img_path)\n","        mask_path = os.path.join(mask_dir, fname.replace('.jpg', '.png'))\n","\n","        img = cv2.imread(img_path)\n","        img = cv2.resize(img, img_size)\n","        img = img / 255.0\n","\n","        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n","        mask = cv2.resize(mask, img_size)\n","        mask = (mask > 127).astype(np.float32)\n","\n","        images.append(img)\n","        masks.append(mask)\n","\n","    return np.array(images), np.array(masks).reshape(-1, img_size[0], img_size[1], 1)\n","\n","x_train, y_train = load_data(train_img_path, train_mask_path)\n","x_val, y_val = load_data(val_img_path, val_mask_path)\n","\n","# ÊûÑÂª∫ SegNet Ê®°Âûã\n","def build_segnet(input_shape=(256, 256, 3)):\n","    inputs = Input(shape=input_shape)\n","\n","    # Encoder\n","    x = Conv2D(64, (3,3), padding='same')(inputs)\n","    x = BatchNormalization()(x)\n","    x = Activation('relu')(x)\n","    x = MaxPooling2D()(x)\n","\n","    x = Conv2D(128, (3,3), padding='same')(x)\n","    x = BatchNormalization()(x)\n","    x = Activation('relu')(x)\n","    x = MaxPooling2D()(x)\n","\n","    x = Conv2D(256, (3,3), padding='same')(x)\n","    x = BatchNormalization()(x)\n","    x = Activation('relu')(x)\n","    x = MaxPooling2D()(x)\n","\n","    # Decoder\n","    x = UpSampling2D()(x)\n","    x = Conv2DTranspose(256, (3,3), padding='same')(x)\n","    x = BatchNormalization()(x)\n","    x = Activation('relu')(x)\n","\n","    x = UpSampling2D()(x)\n","    x = Conv2DTranspose(128, (3,3), padding='same')(x)\n","    x = BatchNormalization()(x)\n","    x = Activation('relu')(x)\n","\n","    x = UpSampling2D()(x)\n","    x = Conv2DTranspose(64, (3,3), padding='same')(x)\n","    x = BatchNormalization()(x)\n","    x = Activation('relu')(x)\n","\n","    x = Conv2DTranspose(1, (1,1), activation='sigmoid')(x)\n","\n","    return Model(inputs, x)\n","\n","segnet = build_segnet()\n","segnet.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# ËÆ≠ÁªÉÊ®°Âûã\n","segnet.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=8, epochs=20)\n","\n","# ‰øùÂ≠òÊ®°Âûã\n","segnet.save('/content/drive/My Drive/segnet_model.h5')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Iz6NL5UtiJgM","executionInfo":{"status":"ok","timestamp":1754441221366,"user_tz":-60,"elapsed":396887,"user":{"displayName":"zhen lei","userId":"10359431944069673304"}},"outputId":"eeed6d20-b9ef-4c7e-8ffc-fc4e793ed0c4"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 3971/3971 [10:22<00:00,  6.38it/s]\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 567/567 [01:15<00:00,  7.50it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 38ms/step - accuracy: 0.8033 - loss: 0.4405 - val_accuracy: 0.8265 - val_loss: 0.4446\n","Epoch 2/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8454 - loss: 0.3691 - val_accuracy: 0.8521 - val_loss: 0.3803\n","Epoch 3/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8432 - loss: 0.3682 - val_accuracy: 0.8564 - val_loss: 0.3361\n","Epoch 4/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8529 - loss: 0.3492 - val_accuracy: 0.8542 - val_loss: 0.3395\n","Epoch 5/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8511 - loss: 0.3510 - val_accuracy: 0.8589 - val_loss: 0.3332\n","Epoch 6/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8525 - loss: 0.3495 - val_accuracy: 0.8682 - val_loss: 0.3172\n","Epoch 7/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8556 - loss: 0.3407 - val_accuracy: 0.8404 - val_loss: 0.3479\n","Epoch 8/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8623 - loss: 0.3280 - val_accuracy: 0.8643 - val_loss: 0.3340\n","Epoch 9/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8597 - loss: 0.3324 - val_accuracy: 0.8641 - val_loss: 0.3483\n","Epoch 10/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8612 - loss: 0.3305 - val_accuracy: 0.8632 - val_loss: 0.3245\n","Epoch 11/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8611 - loss: 0.3258 - val_accuracy: 0.8675 - val_loss: 0.3259\n","Epoch 12/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8683 - loss: 0.3174 - val_accuracy: 0.8732 - val_loss: 0.3066\n","Epoch 13/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8673 - loss: 0.3149 - val_accuracy: 0.8714 - val_loss: 0.3087\n","Epoch 14/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8674 - loss: 0.3174 - val_accuracy: 0.8697 - val_loss: 0.3092\n","Epoch 15/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8682 - loss: 0.3168 - val_accuracy: 0.8669 - val_loss: 0.3148\n","Epoch 16/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8660 - loss: 0.3187 - val_accuracy: 0.8548 - val_loss: 0.3231\n","Epoch 17/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8720 - loss: 0.3063 - val_accuracy: 0.8763 - val_loss: 0.2976\n","Epoch 18/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8728 - loss: 0.3057 - val_accuracy: 0.8771 - val_loss: 0.2960\n","Epoch 19/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8704 - loss: 0.3117 - val_accuracy: 0.8694 - val_loss: 0.3089\n","Epoch 20/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 22ms/step - accuracy: 0.8736 - loss: 0.3035 - val_accuracy: 0.8392 - val_loss: 0.3392\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]}]},{"cell_type":"code","source":["# =============================================\n","# üß† Á¨¨ÂõõÊ≠•ÔºöËÆ≠ÁªÉ FCN Ê®°ÂûãÔºàtrain_fcn.pyÔºâ\n","# =============================================\n","import numpy as np\n","import tensorflow as tf\n","import cv2\n","import glob\n","from tqdm import tqdm\n","from tensorflow.keras.applications import VGG16\n","from tensorflow.keras.layers import Input, Conv2D, Conv2DTranspose, Add, Activation\n","from tensorflow.keras.models import Model\n","\n","train_img_path = '/content/drive/My Drive/dataset/train/images/'\n","train_mask_path = '/content/drive/My Drive/dataset/train/masks/'\n","val_img_path = '/content/drive/My Drive/dataset/val/images/'\n","val_mask_path = '/content/drive/My Drive/dataset/val/masks/'\n","\n","def load_data(img_dir, mask_dir, img_size=(256, 256)):\n","    images, masks = [], []\n","    img_files = sorted(glob.glob(img_dir + '*'))\n","    for img_path in tqdm(img_files):\n","        fname = os.path.basename(img_path)\n","        mask_path = os.path.join(mask_dir, fname.replace('.jpg', '.png'))\n","\n","        img = cv2.imread(img_path)\n","        img = cv2.resize(img, img_size)\n","        img = img / 255.0\n","\n","        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n","        mask = cv2.resize(mask, img_size)\n","        mask = (mask > 127).astype(np.float32)\n","\n","        images.append(img)\n","        masks.append(mask)\n","\n","    return np.array(images), np.array(masks).reshape(-1, img_size[0], img_size[1], 1)\n","\n","x_train, y_train = load_data(train_img_path, train_mask_path)\n","x_val, y_val = load_data(val_img_path, val_mask_path)\n","\n","# ÊûÑÂª∫ FCN Ê®°ÂûãÔºàÂü∫‰∫é VGG16Ôºâ\n","def build_fcn(input_shape=(256, 256, 3)):\n","    vgg = VGG16(include_top=False, weights='imagenet', input_shape=input_shape)\n","    for layer in vgg.layers: layer.trainable = False\n","\n","    f3 = vgg.get_layer('block3_pool').output\n","    f4 = vgg.get_layer('block4_pool').output\n","    f5 = vgg.get_layer('block5_pool').output\n","\n","    o = Conv2D(512, (7, 7), activation='relu', padding='same')(f5)\n","    o = Conv2D(512, (1, 1), activation='relu', padding='same')(o)\n","    o = Conv2D(1, (1, 1), activation='sigmoid', padding='same')(o)\n","\n","    o = Conv2DTranspose(1, kernel_size=(4, 4), strides=(2, 2), padding='same')(o)\n","    o2 = Conv2D(1, (1, 1), activation='sigmoid', padding='same')(f4)\n","    o = Add()([o, o2])\n","\n","    o = Conv2DTranspose(1, kernel_size=(4, 4), strides=(2, 2), padding='same')(o)\n","    o3 = Conv2D(1, (1, 1), activation='sigmoid', padding='same')(f3)\n","    o = Add()([o, o3])\n","\n","    o = Conv2DTranspose(1, kernel_size=(8, 8), strides=(8, 8), padding='same')(o)\n","    o = Activation('sigmoid')(o)\n","\n","    model = Model(inputs=vgg.input, outputs=o)\n","    return model\n","\n","fcn = build_fcn()\n","fcn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","# ËÆ≠ÁªÉ FCN Ê®°Âûã\n","fcn.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=8, epochs=20)\n","\n","# ‰øùÂ≠òÊ®°Âûã\n","fcn.save('/content/drive/My Drive/fcn_model.h5')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gICyevWNiQ9A","executionInfo":{"status":"ok","timestamp":1754444428386,"user_tz":-60,"elapsed":853787,"user":{"displayName":"zhen lei","userId":"10359431944069673304"}},"outputId":"202a9ed6-1a4b-4ef3-ed41-e2114a5bceb5"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 3971/3971 [10:27<00:00,  6.33it/s]\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 567/567 [01:15<00:00,  7.51it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m58889256/58889256\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","Epoch 1/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 24ms/step - accuracy: 0.7072 - loss: 0.6160 - val_accuracy: 0.7936 - val_loss: 0.4884\n","Epoch 2/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.7935 - loss: 0.4835 - val_accuracy: 0.7936 - val_loss: 0.4636\n","Epoch 3/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.7915 - loss: 0.4597 - val_accuracy: 0.7936 - val_loss: 0.4146\n","Epoch 4/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8019 - loss: 0.4122 - val_accuracy: 0.8276 - val_loss: 0.3914\n","Epoch 5/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8225 - loss: 0.3974 - val_accuracy: 0.8337 - val_loss: 0.3853\n","Epoch 6/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8288 - loss: 0.3904 - val_accuracy: 0.8332 - val_loss: 0.3815\n","Epoch 7/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8261 - loss: 0.3909 - val_accuracy: 0.8327 - val_loss: 0.3809\n","Epoch 8/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8283 - loss: 0.3887 - val_accuracy: 0.8340 - val_loss: 0.3792\n","Epoch 9/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8249 - loss: 0.3944 - val_accuracy: 0.8343 - val_loss: 0.3778\n","Epoch 10/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8272 - loss: 0.3906 - val_accuracy: 0.8367 - val_loss: 0.3778\n","Epoch 11/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8281 - loss: 0.3880 - val_accuracy: 0.8359 - val_loss: 0.3784\n","Epoch 12/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8296 - loss: 0.3866 - val_accuracy: 0.8387 - val_loss: 0.3766\n","Epoch 13/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 13ms/step - accuracy: 0.8320 - loss: 0.3845 - val_accuracy: 0.8357 - val_loss: 0.3761\n","Epoch 14/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8348 - loss: 0.3777 - val_accuracy: 0.8362 - val_loss: 0.3756\n","Epoch 15/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8311 - loss: 0.3847 - val_accuracy: 0.8367 - val_loss: 0.3755\n","Epoch 16/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8297 - loss: 0.3878 - val_accuracy: 0.8368 - val_loss: 0.3757\n","Epoch 17/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8291 - loss: 0.3866 - val_accuracy: 0.8374 - val_loss: 0.3743\n","Epoch 18/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8295 - loss: 0.3852 - val_accuracy: 0.8351 - val_loss: 0.3763\n","Epoch 19/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8300 - loss: 0.3876 - val_accuracy: 0.8376 - val_loss: 0.3751\n","Epoch 20/20\n","\u001b[1m497/497\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 13ms/step - accuracy: 0.8301 - loss: 0.3880 - val_accuracy: 0.8388 - val_loss: 0.3738\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]}]}]}