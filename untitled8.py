# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/173p2AmUCQzXNlC0c9i9FJX8wJwJqEbvo
"""

# 🚩 第一步：挂载 Google Drive（运行后授权）
from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf

model = tf.keras.models.load_model('/content/drive/MyDrive/unet_water_segmentation.h5')
print("Input shape:", model.input_shape)

import os
import urllib.request
from tqdm import tqdm
import math
from concurrent.futures import ThreadPoolExecutor

# ✅ 粘贴你OCR提取的完整100个湖泊 Rectangle（部分示例，请粘贴完整）
lake_rectangles = [
  [90.10, 30.20, 91.05, 31.10],
  [90.3, 28.65, 91.1, 29.45],
  [81.35, 30.4735, 81.6830, 30.8735],
  [88.5, 31.4, 89.5, 32.2],
  [97.03, 34.8, 97.52, 35.1],
  [90.20, 28.48, 90.55, 28.67],
  [86.3, 30.7, 86.85, 31.4],
  [85.3, 30.7, 85.9, 31.1],
  [99.5, 36.5, 100.9, 37.3],
  [81.1, 30.5, 81.35, 30.8735],
  [86.6, 41.8, 87.44, 42.25],
  [80.9806, 44.4083, 81.3806, 44.8083],
  [82.7, 44.6555, 83.1619, 45.0555],
  [85.7, 45.86, 85.9, 46],
  [92.6715, 43.5619, 92.8715, 43.7619],
  [88.11, 43.90, 88.15, 43.87],
  [87.0126, 47.015, 87.6, 47.43],
  [89.05, 37.3323, 89.95, 37.7323],
  [31.5, 0.7, 34.9, -3],
  [28.8, -9, 31.2, -3.2],
  [33.8016, -14.45, 35.31, -9.4606],
  [30.3, 1, 31.5, 2.7],
  [13.7802, 12.77, 14.7802, 13.28],
  [35.743, 2.3259, 36.743, 4.7259],
  [28.8277, -2.5419, 29.4277, -1.4819],
  [29.25, -0.7, 29.95, -0.04],
  [28.2422, -9.6290, 29.2422, -8.4290],
  [31.4553, -8.6651, 33.0553, -7.3651],
  [135.8226, 34.9686, 136.2826, 35.5186],
  [115.7546, 28.3859, 116.8046, 29.7859],
  [112.6968, 28.8147, 113.1968, 29.5647],
  [119.8417, 30.8889, 120.6817, 31.5489],
  [116.9006, 48.5489, 117.8006, 49.3889],
  [123.8383, 45.1325, 124.4483, 45.4625],
  [102.5190, 24.6467, 102.9190, 25.0467],
  [99.9811, 25.5831, 100.3811, 25.9831],
  [118.1472, 33.0555, 118.8972, 33.7555],
  [116.5545, 34.3802, 117.4545, 35.3802],
  [73.4070, 44.8, 79.3370, 46.8566],
  [76.1001, 42.0833, 78.4001, 42.7833],
  [82.8455, 47.5880, 84.8455, 48.3880],
  [80.58, 46.35, 81.38, 46.7066],
  [81.18, 45.65, 82.2, 46.5266],
  [68.34, 39.09, 68.39, 39.08],
  [65.8, 40.4162, 68.1, 41.1162],
  [68.6101, 50.13, 69.8101, 50.72],
  [85.5, 48.65, 86.1, 48.85],
  [58.17, 44.18, 61.6, 46.8],
  [6.1, 46.19, 7, 46.55],
  [8.85, 47.85, 9.79, 47.47],
  [29.62, 61.74, 33.20, 59.89],
  [33.62, 62.98, 36.63, 60.8],
  [16.68, 47.65, 16.87, 47.94],
  [12.26, 58.32, 14.15, 59.43],
  [14.04, 57.75, 15, 58.84],
  [-4.27, 57.43, -4.70, 57.13],
  [-2.98, 54.42, -2.91, 54.27],
  [8.49, 45.72, 8.86, 46.19],
  [-60.37, -3.44, -60.23, -3.32],
  [-60.6, -3.66, -60.44, -3.44],
  [-62.06, -4.34, -62.44, -4.59],
  [-64.39, -2.76, -64.84, -2.36],
  [-65.04, -3.70, -64.68, -3.26],
  [-54.93, -1.99, -55.51, -2.32],
  [-57.23, -2.49, -57.17, -2.53],
  [-60.17, -3.66, -60.00, -3.56],
  [-1.40, 29.34, -1.10, 29.08],
  [8.88, 34.09, 7.75, 33.33],
  [16.99, 16.55, 18.89, 17.36],
  [10.27, 35.66, 10.62, 35.37],
  [-0.1, 28.90, 0.17, 29.15],
  [20.49, 19.04, 20.52, 19.075],
  [20.5, 19, 20.55, 19.03],
  [20.85, 18.91, 20.90, 18.96],
  [110.18, 56.09, 103.53, 51.38],
  [131.87, 45.39, 132.86, 44.52],
  [99.06, 73.80, 105.80, 75.26],
  [77.3, 54.57, 78.11, 55.09],
  [141.59, 72.43, 142.36, 72.62],
  [143.55, 62.57, 143.68, 62.28],
  [176.86, 62.88, 177.57, 62.55],
  [92.16, 49.95, 93.75, 50.71],
  [146.38, 69.32, 146.93, 69.05],
  [102.09, 68.55, 102.66, 68.31],
  [-52.04, 67.11, -51.70, 67.20],
  [-51.07, 69.221, -51.09, 69.227],
  [-50.50, 70.06, -50.37, 70.14],
  [-50.67, 67.10, -50.47, 67.05],
  [-50.50, 67.07, -50.29, 67.11],
  [-50.71, 66.99, -50.57, 66.95],
  [-52.18, 66.96, -51.47, 67.06],
  [136.64, -27.79, 138.09, -29.53],
  [137.07, -30.12, 138.18, -31.98],
  [135.31, -31.00, 136.36, -32.38],
  [140.09, -30.21, 139.49, -31.16],
  [130.34, -24.46, 131.51, -25.00],
  [122.55, -23.71, 123.24, -23.18],
  [121.92, -25.94, 123.23, -26.60],
  [128.23, -22.7, 129.29, -21.97],
  [127.24, -20.06, 127.53, -20.31]
]


def get_tiles(lon_min, lat_min, lon_max, lat_max):
    tiles = []
    for lon in range(int(lon_min // 10) * 10, int(math.ceil(lon_max / 10)) * 10, 10):
        for lat in range(int(lat_min // 10) * 10, int(math.ceil(lat_max / 10)) * 10, 10):
            lon_code = f"{abs(lon):03d}{'E' if lon >= 0 else 'W'}"
            lat_code = f"{abs(lat):02d}{'N' if lat >= 0 else 'S'}"
            tiles.append((lon_code, lat_code, lat))
    return tiles

# 图像保存路径
base_folder = "/content/drive/MyDrive/gsw_lake_tiles_multithread"
os.makedirs(base_folder, exist_ok=True)

# 下载单个图像（用于多线程）
def download_tile(url, save_path):
    if os.path.exists(save_path):
        return
    try:
        response = urllib.request.urlopen(url, timeout=10)
        if response.getcode() == 200:
            urllib.request.urlretrieve(url, save_path)
    except:
        pass  # 忽略下载失败

def download_lake_tiles(lake_id, rect, max_threads=8):
    lon_min, lat_min, lon_max, lat_max = rect
    lake_dir = os.path.join(base_folder, f"lake_{lake_id:03d}")
    os.makedirs(lake_dir, exist_ok=True)

    tiles = get_tiles(lon_min, lat_min, lon_max, lat_max)
    tasks = []

    for year in range(2000, 2022):
        for lon_code, lat_code, lat in tiles:
            months = [6,7,8] if lat >= 0 else [12,1,2]
            for month in months:
                ym_year = year if not (lat < 0 and month < 3) else year + 1
                ym = f"{ym_year}{month:02d}"
                filename = f"monthly_history_{lon_code}_{lat_code}_{ym}_v1_4.tif"
                url = f"http://storage.googleapis.com/global-surface-water/downloads2021/monthly_history/{filename}"
                save_path = os.path.join(lake_dir, filename)
                tasks.append((url, save_path))

    with ThreadPoolExecutor(max_workers=max_threads) as executor:
        list(tqdm(executor.map(lambda args: download_tile(*args), tasks), total=len(tasks), desc=f"Lake {lake_id:03d}"))

# 🚀 逐个湖泊执行下载（每湖多线程）
for lake_id, rect in enumerate(lake_rectangles):
    download_lake_tiles(lake_id, rect, max_threads=8)

!ls "/content/drive/MyDrive/gsw_lake_patches/lake_000"

!find /content/drive/MyDrive/gsw_lake_patches -type f

import re

def sanitize_filename(name):
    # 替换非法字符为下划线，只保留允许字符
    return re.sub(r"[^a-zA-Z0-9\.\,\:\;\_\-]", "_", name)[:100]

# ✅ 使用 Earth Engine 分批导出 monthly_history 图像（每批 10 个湖）+ CSV 索引生成（使用湖泊名称）
import ee
import time
import csv
from tqdm import tqdm

# 初始化 Earth Engine（需授权）
ee.Authenticate()
ee.Initialize(project='lake-465014')

# === 设置参数 ===
START_YEAR = 2000
END_YEAR = 2021
MONTHS_NORTH = [6, 7, 8]  # 北半球夏季
MONTHS_SOUTH = [12, 1, 2] # 南半球夏季（跨年）
EXPORT_SCALE = 30  # 分辨率（米）
LAKES_PER_BATCH = 10  # 每批导出湖泊数
SLEEP_BETWEEN_TASKS = 0.5  # 每任务间隔（秒）
SLEEP_BETWEEN_BATCHES = 30  # 每批之间等待（秒）
EXPORT_FOLDER = "GSW_MonthlyHistory"  # Google Drive 保存根目录
INDEX_CSV = "gsw_export_index.csv"  # 索引文件名

# ✅ 使用湖泊名称 + 坐标（示例）
lake_info = [
    ("Namtso", [90.1, 30.2, 91.05, 31.1]),
    ("Yamdrok", [90.3, 28.65, 91.1, 29.45]),
    ("Manasarovar", [81.35, 30.4735, 81.683, 30.8735]),
    ("Siling Lake", [88.5, 31.4, 89.5, 32.2]),
    ("Gyaring Lake", [97.03, 34.8, 97.52, 35.1]),
    ("Puma Yumco", [90.2, 28.48, 90.55, 28.67]),
    ("Tangra Yumco", [86.3, 30.7, 86.85, 31.4]),
    ("Zhari Namco", [85.3, 30.7, 85.9, 31.1]),
    ("Qinghai Lake", [99.5, 36.5, 100.9, 37.3]),
    ("Lake Rakshastal", [81.1, 30.5, 81.35, 30.8735]),
    ("Bosten Lake", [86.6, 41.8, 87.44, 42.25]),
    ("Sayram Lake", [80.9806, 44.4083, 81.3806, 44.8083]),
    ("Ebinur Lake", [82.7, 44.6555, 83.1619, 45.0555]),
    ("Ailik Lake", [85.7, 45.86, 85.9, 46]),
    ("Lake Barkol", [92.6715, 43.5619, 92.8715, 43.7619]),
    ("Tianchi", [88.11, 43.9, 88.15, 43.87]),
    ("Lake Ulungur", [87.0126, 47.015, 87.6, 47.43]),
    ("Lake Ayakkum", [89.05, 37.3323, 89.95, 37.7323]),
    ("Lake Victoria", [31.5, 0.7, 34.9, -3]),
    ("Lake Tanganyika", [28.8, -9, 31.2, -3.2]),
    ("Lake Malawi", [33.8016, -14.45, 35.31, -9.4606]),
    ("Lake Albert", [30.3, 1, 31.5, 2.7]),
    ("Lake Chad", [13.7802, 12.77, 14.7802, 13.28]),
    ("Lake Turkana", [35.743, 2.3259, 36.743, 4.7259]),
    ("Lake Kivu", [28.8277, -2.5419, 29.4277, -1.4819]),
    ("Lake Edward", [29.25, -0.7, 29.95, -0.04]),
    ("Lake Mweru", [28.2422, -9.629, 29.2422, -8.429]),
    ("Lake Rukwa", [31.4553, -8.6651, 33.0553, -7.3651]),
    ("Lake Biwa", [135.8226, 34.9686, 136.2826, 35.5186]),
    ("Poyang Lake", [115.7546, 28.3859, 116.8046, 29.7859]),
    ("Dongting Lake", [112.6968, 28.8147, 113.1968, 29.5647]),
    ("Taihu Lake", [119.8417, 30.8889, 120.6817, 31.5489]),
    ("Hulun Lake", [116.9006, 48.5489, 117.8006, 49.3889]),
    ("Chagan Lake", [123.8383, 45.1325, 124.4483, 45.4625]),
    ("Dianchi Lake", [102.519, 24.6467, 102.919, 25.0467]),
    ("Erhai Lake", [99.9811, 25.5831, 100.3811, 25.9831]),
    ("Hongze Lake", [118.1472, 33.0555, 118.8972, 33.7555]),
    ("Nansi Lake", [116.5545, 34.3802, 117.4545, 35.3802]),
    ("Lake Balkhash", [73.407, 44.8, 79.337, 46.8566]),
    ("Issyk-Kul", [76.1001, 42.0833, 78.4001, 42.7833]),
    ("Lake Zaysan", [82.8455, 47.588, 84.8455, 48.388]),
    ("Lake Sasykkol", [80.58, 46.35, 81.38, 46.7066]),
    ("Lake Alakol", [81.18, 45.65, 82.2, 46.5266]),
    ("Iskanderkul", [68.34, 39.09, 68.39, 39.08]),
    ("Aydar Lake", [65.8, 40.4162, 68.1, 41.1162]),
    ("Lake Tengiz", [68.6101, 50.13, 69.8101, 50.72]),
    ("Lake Markakol", [85.5, 48.65, 86.1, 48.85]),
    ("Aral Sea", [58.17, 44.18, 61.6, 46.8]),
    ("Lake Geneva", [6.1, 46.19, 7, 46.55]),
    ("Lake Constance", [8.85, 47.85, 9.79, 47.47]),
    ("Lake Ladoga", [29.62, 61.74, 33.2, 59.89]),
    ("Lake Onega", [33.62, 62.98, 36.63, 60.8]),
    ("Lake Neusiedl", [16.68, 47.65, 16.87, 47.94]),
    ("Lake Vänern", [12.26, 58.32, 14.15, 59.43]),
    ("Lake Vättern", [14.04, 57.75, 15, 58.84]),
    ("Loch Ness", [-4.27, 57.43, -4.7, 57.13]),
    ("Lake Windermere", [-2.98, 54.42, -2.91, 54.27]),
    ("Lake Maggiore", [8.49, 45.72, 8.86, 46.19]),
    ("Lago Janauacá", [-60.37, -3.44, -60.23, -3.32]),
    ("Lago Mirauá", [-60.6, -3.66, -60.44, -3.44]),
    ("Lake Ayapuá", [-62.06, -4.34, -62.44, -4.59]),
    ("Lake Amanã", [-64.39, -2.76, -64.84, -2.36]),
    ("Lago Tefé", [-65.04, -3.7, -64.68, -3.26]),
    ("Lago Grande de Curuai", [-54.93, -1.99, -55.51, -2.32]),
    ("Lago do Arari", [-57.23, -2.49, -57.17, -2.53]),
    ("Lago Mamori", [-60.17, -3.66, -60.0, -3.56]),
    ("Sebkha el Melah", [-1.4, 29.34, -1.1, 29.08]),
    ("Chott el Djerid", [8.88, 34.09, 7.75, 33.33]),
    ("Lake Bodélé", [16.99, 16.55, 18.89, 17.36]),
    ("Sebkha Sidi El Hani", [10.27, 35.66, 10.62, 35.37]),
    ("Sebkha de Timimoun", [-0.1, 28.9, 0.17, 29.15]),
    ("Lake Yoa", [20.49, 19.04, 20.52, 19.075]),
    ("Lake Katam", [20.5, 19, 20.55, 19.03]),
    ("Lake Ounianga Serir", [20.85, 18.91, 20.9, 18.96]),
    ("Lake Baikal", [110.18, 56.09, 103.53, 51.38]),
    ("Lake Khanka", [131.87, 45.39, 132.86, 44.52]),
    ("Lake Taimyr", [99.06, 73.8, 105.8, 75.26]),
    ("Lake Chany", [77.3, 54.57, 78.11, 55.09]),
    ("Lake Bustakh", [141.59, 72.43, 142.36, 72.62]),
    ("Lake Labynkyr", [143.55, 62.57, 143.68, 62.28]),
    ("Lake Pekulney", [176.86, 62.88, 177.57, 62.55]),
    ("Lake Uvs", [92.16, 49.95, 93.75, 50.71]),
    ("Lake Ozhogino", [146.38, 69.32, 146.93, 69.05]),
    ("Lake Yessey", [102.09, 68.55, 102.66, 68.31]),
    ("Supraglacial Lakes", [-52.04, 67.11, -51.7, 67.2]),
    ("Lake Ilulissat", [-51.07, 69.221, -51.09, 69.227]),
    ("Lake Amitsup Tasia", [-50.5, 70.06, -50.37, 70.14]),
    ("Lake Sanningasoq", [-50.67, 67.1, -50.47, 67.05]),
    ("Lake Aajuitsup Tasia", [-50.5, 67.07, -50.29, 67.11]),
    ("Lake Ferguson", [-50.71, 66.99, -50.57, 66.95]),
    ("Lake Tasersuaq", [-52.18, 66.96, -51.47, 67.06]),
    ("Lake Eyre", [136.64, -27.79, 138.09, -29.53]),
    ("Lake Torrens", [137.07, -30.12, 138.18, -31.98]),
    ("Lake Gairdner", [135.31, -31.0, 136.36, -32.38]),
    ("Lake Frome", [140.09, -30.21, 139.49, -31.16]),
    ("Lake Amadeus", [130.34, -24.46, 131.51, -25.0]),
    ("Lake Disappointment", [122.55, -23.71, 123.24, -23.18]),
    ("Lake Carnegie", [121.92, -25.94, 123.23, -26.6]),
    ("Lake Mackay", [128.23, -22.7, 129.29, -21.97]),
    ("Lake Gregory", [127.24, -20.06, 127.53, -20.31]),
]

# 准备 CSV 索引文件
with open(INDEX_CSV, mode='w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["lake_name", "year", "month", "filename", "folder"])

    # 分批执行导出任务
    for batch_start in range(0, len(lake_info), LAKES_PER_BATCH):
        batch = lake_info[batch_start:batch_start + LAKES_PER_BATCH]
        print(f"🚀 执行第 {batch_start//LAKES_PER_BATCH + 1} 批导出任务...")

        for lake_name, (lon_min, lat_min, lon_max, lat_max) in tqdm(batch):
            region = ee.Geometry.Rectangle([lon_min, lat_min, lon_max, lat_max])
            lat_center = (lat_min + lat_max) / 2
            months = MONTHS_NORTH if lat_center >= 0 else MONTHS_SOUTH

            for year in range(START_YEAR, END_YEAR + 1):
                for month in months:
                    ym_year = year if not (lat_center < 0 and month < 3) else year + 1
                    date_str = f"{ym_year}-{month:02d}-15"
                    image = ee.ImageCollection("JRC/GSW1_4/MonthlyHistory") \
                        .filterDate(date_str, ee.Date(date_str).advance(1, 'month')) \
                        .mosaic().select('water')

                    folder_path = f"{EXPORT_FOLDER}/{lake_name}/{ym_year}"
                    filename = f"{lake_name}_{ym_year}{month:02d}"

                    task = ee.batch.Export.image.toDrive(
                        image=image,
                        region=region,
                        folder=folder_path,
                        description=filename,
                        fileNamePrefix=filename,
                        scale=EXPORT_SCALE,
                        maxPixels=1e13
                    )
                    task.start()
                    writer.writerow([lake_name, ym_year, month, filename + ".tif", folder_path])
                    print(f"✅ 提交任务: {folder_path}/{filename}")
                    time.sleep(SLEEP_BETWEEN_TASKS)

        print(f"⏳ 批次 {batch_start//LAKES_PER_BATCH + 1} 完成，等待 {SLEEP_BETWEEN_BATCHES}s...\n")
        time.sleep(SLEEP_BETWEEN_BATCHES)

print("🎉 所有批次任务提交完毕。你可以在 Earth Engine Task 面板查看进度。\n导出图像将自动保存到你的 Google Drive → 'GSW_MonthlyHistory/<湖泊名>/<年份>/' 文件夹中。\n📄 索引 CSV 文件已生成：gsw_export_index.csv")

START_INDEX = 0
END_INDEX = 10  # 下一次可设置为 10 → 20

selected_lakes = lake_info[START_INDEX:END_INDEX]

# ✅ 使用 Earth Engine 导出 monthly_history 图像（从第 55 个湖开始）+ CSV 索引生成（使用湖泊名称）
import ee
import time
import csv
from tqdm import tqdm

# 初始化 Earth Engine（需授权）
ee.Authenticate()
ee.Initialize(project='lake-462714')

# === 设置参数 ===
START_YEAR = 2000
END_YEAR = 2021
MONTHS_NORTH = [6, 7, 8]  # 北半球夏季
MONTHS_SOUTH = [12, 1, 2] # 南半球夏季（跨年）
EXPORT_SCALE = 30
SLEEP_BETWEEN_TASKS = 0.5
EXPORT_FOLDER = "GSW_MonthlyHistory"
INDEX_CSV = "gsw_export_index.csv"

# ✅ 使用湖泊名称 + 坐标（示例）
lake_info = [
    ("Namtso", [90.1, 30.2, 91.05, 31.1]),
    ("Yamdrok", [90.3, 28.65, 91.1, 29.45]),
    ("Manasarovar", [81.35, 30.4735, 81.683, 30.8735]),
    ("Siling Lake", [88.5, 31.4, 89.5, 32.2]),
    ("Gyaring Lake", [97.03, 34.8, 97.52, 35.1]),
    ("Puma Yumco", [90.2, 28.48, 90.55, 28.67]),
    ("Tangra Yumco", [86.3, 30.7, 86.85, 31.4]),
    ("Zhari Namco", [85.3, 30.7, 85.9, 31.1]),
    ("Qinghai Lake", [99.5, 36.5, 100.9, 37.3]),
    ("Lake Rakshastal", [81.1, 30.5, 81.35, 30.8735]),
    ("Bosten Lake", [86.6, 41.8, 87.44, 42.25]),
    ("Sayram Lake", [80.9806, 44.4083, 81.3806, 44.8083]),
    ("Ebinur Lake", [82.7, 44.6555, 83.1619, 45.0555]),
    ("Ailik Lake", [85.7, 45.86, 85.9, 46]),
    ("Lake Barkol", [92.6715, 43.5619, 92.8715, 43.7619]),
    ("Tianchi", [88.11, 43.9, 88.15, 43.87]),
    ("Lake Ulungur", [87.0126, 47.015, 87.6, 47.43]),
    ("Lake Ayakkum", [89.05, 37.3323, 89.95, 37.7323]),
    ("Lake Victoria", [31.5, 0.7, 34.9, -3]),
    ("Lake Tanganyika", [28.8, -9, 31.2, -3.2]),
    ("Lake Malawi", [33.8016, -14.45, 35.31, -9.4606]),
    ("Lake Albert", [30.3, 1, 31.5, 2.7]),
    ("Lake Chad", [13.7802, 12.77, 14.7802, 13.28]),
    ("Lake Turkana", [35.743, 2.3259, 36.743, 4.7259]),
    ("Lake Kivu", [28.8277, -2.5419, 29.4277, -1.4819]),
    ("Lake Edward", [29.25, -0.7, 29.95, -0.04]),
    ("Lake Mweru", [28.2422, -9.629, 29.2422, -8.429]),
    ("Lake Rukwa", [31.4553, -8.6651, 33.0553, -7.3651]),
    ("Lake Biwa", [135.8226, 34.9686, 136.2826, 35.5186]),
    ("Poyang Lake", [115.7546, 28.3859, 116.8046, 29.7859]),
    ("Dongting Lake", [112.6968, 28.8147, 113.1968, 29.5647]),
    ("Taihu Lake", [119.8417, 30.8889, 120.6817, 31.5489]),
    ("Hulun Lake", [116.9006, 48.5489, 117.8006, 49.3889]),
    ("Chagan Lake", [123.8383, 45.1325, 124.4483, 45.4625]),
    ("Dianchi Lake", [102.519, 24.6467, 102.919, 25.0467]),
    ("Erhai Lake", [99.9811, 25.5831, 100.3811, 25.9831]),
    ("Hongze Lake", [118.1472, 33.0555, 118.8972, 33.7555]),
    ("Nansi Lake", [116.5545, 34.3802, 117.4545, 35.3802]),
    ("Lake Balkhash", [73.407, 44.8, 79.337, 46.8566]),
    ("Issyk-Kul", [76.1001, 42.0833, 78.4001, 42.7833]),
    ("Lake Zaysan", [82.8455, 47.588, 84.8455, 48.388]),
    ("Lake Sasykkol", [80.58, 46.35, 81.38, 46.7066]),
    ("Lake Alakol", [81.18, 45.65, 82.2, 46.5266]),
    ("Iskanderkul", [68.34, 39.09, 68.39, 39.08]),
    ("Aydar Lake", [65.8, 40.4162, 68.1, 41.1162]),
    ("Lake Tengiz", [68.6101, 50.13, 69.8101, 50.72]),
    ("Lake Markakol", [85.5, 48.65, 86.1, 48.85]),
    ("Aral Sea", [58.17, 44.18, 61.6, 46.8]),
    ("Lake Geneva", [6.1, 46.19, 7, 46.55]),
    ("Lake Constance", [8.85, 47.85, 9.79, 47.47]),
    ("Lake Ladoga", [29.62, 61.74, 33.2, 59.89]),
    ("Lake Onega", [33.62, 62.98, 36.63, 60.8]),
    ("Lake Neusiedl", [16.68, 47.65, 16.87, 47.94]),
    ("Lake Vänern", [12.26, 58.32, 14.15, 59.43]),
    ("Lake Vättern", [14.04, 57.75, 15, 58.84]),
    ("Loch Ness", [-4.27, 57.43, -4.7, 57.13]),
    ("Lake Windermere", [-2.98, 54.42, -2.91, 54.27]),
    ("Lake Maggiore", [8.49, 45.72, 8.86, 46.19]),
    ("Lago Janauacá", [-60.37, -3.44, -60.23, -3.32]),
    ("Lago Mirauá", [-60.6, -3.66, -60.44, -3.44]),
    ("Lake Ayapuá", [-62.06, -4.34, -62.44, -4.59]),
    ("Lake Amanã", [-64.39, -2.76, -64.84, -2.36]),
    ("Lago Tefé", [-65.04, -3.7, -64.68, -3.26]),
    ("Lago Grande de Curuai", [-54.93, -1.99, -55.51, -2.32]),
    ("Lago do Arari", [-57.23, -2.49, -57.17, -2.53]),
    ("Lago Mamori", [-60.17, -3.66, -60.0, -3.56]),
    ("Sebkha el Melah", [-1.4, 29.34, -1.1, 29.08]),
    ("Chott el Djerid", [8.88, 34.09, 7.75, 33.33]),
    ("Lake Bodélé", [16.99, 16.55, 18.89, 17.36]),
    ("Sebkha Sidi El Hani", [10.27, 35.66, 10.62, 35.37]),
    ("Sebkha de Timimoun", [-0.1, 28.9, 0.17, 29.15]),
    ("Lake Yoa", [20.49, 19.04, 20.52, 19.075]),
    ("Lake Katam", [20.5, 19, 20.55, 19.03]),
    ("Lake Ounianga Serir", [20.85, 18.91, 20.9, 18.96]),
    ("Lake Baikal", [110.18, 56.09, 103.53, 51.38]),
    ("Lake Khanka", [131.87, 45.39, 132.86, 44.52]),
    ("Lake Taimyr", [99.06, 73.8, 105.8, 75.26]),
    ("Lake Chany", [77.3, 54.57, 78.11, 55.09]),
    ("Lake Bustakh", [141.59, 72.43, 142.36, 72.62]),
    ("Lake Labynkyr", [143.55, 62.57, 143.68, 62.28]),
    ("Lake Pekulney", [176.86, 62.88, 177.57, 62.55]),
    ("Lake Uvs", [92.16, 49.95, 93.75, 50.71]),
    ("Lake Ozhogino", [146.38, 69.32, 146.93, 69.05]),
    ("Lake Yessey", [102.09, 68.55, 102.66, 68.31]),
    ("Supraglacial Lakes", [-52.04, 67.11, -51.7, 67.2]),
    ("Lake Ilulissat", [-51.07, 69.221, -51.09, 69.227]),
    ("Lake Amitsup Tasia", [-50.5, 70.06, -50.37, 70.14]),
    ("Lake Sanningasoq", [-50.67, 67.1, -50.47, 67.05]),
    ("Lake Aajuitsup Tasia", [-50.5, 67.07, -50.29, 67.11]),
    ("Lake Ferguson", [-50.71, 66.99, -50.57, 66.95]),
    ("Lake Tasersuaq", [-52.18, 66.96, -51.47, 67.06]),
    ("Lake Eyre", [136.64, -27.79, 138.09, -29.53]),
    ("Lake Torrens", [137.07, -30.12, 138.18, -31.98]),
    ("Lake Gairdner", [135.31, -31.0, 136.36, -32.38]),
    ("Lake Frome", [140.09, -30.21, 139.49, -31.16]),
    ("Lake Amadeus", [130.34, -24.46, 131.51, -25.0]),
    ("Lake Disappointment", [122.55, -23.71, 123.24, -23.18]),
    ("Lake Carnegie", [121.92, -25.94, 123.23, -26.6]),
    ("Lake Mackay", [128.23, -22.7, 129.29, -21.97]),
    ("Lake Gregory", [127.24, -20.06, 127.53, -20.31]),
]

# ✅ 只从第 55 个湖开始导出
lake_info = lake_info[54:]  # 从 index 54 开始（第 55 个湖）

# 准备 CSV 索引文件
with open(INDEX_CSV, mode='w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["lake_name", "year", "month", "filename", "folder"])

    for lake_name, (lon_min, lat_min, lon_max, lat_max) in tqdm(lake_info):
        region = ee.Geometry.Rectangle([lon_min, lat_min, lon_max, lat_max])
        lat_center = (lat_min + lat_max) / 2
        months = MONTHS_NORTH if lat_center >= 0 else MONTHS_SOUTH

        for year in range(START_YEAR, END_YEAR + 1):
            for month in months:
                ym_year = year if not (lat_center < 0 and month < 3) else year + 1
                date_str = f"{ym_year}-{month:02d}-15"
                image = ee.ImageCollection("JRC/GSW1_4/MonthlyHistory") \
                    .filterDate(date_str, ee.Date(date_str).advance(1, 'month')) \
                    .mosaic().select('water').unmask(0).multiply(127).toUint8()

                safe_lake_name = sanitize_filename(lake_name)
                filename = f"{safe_lake_name}_{ym_year}{month:02d}"
                folder_path = f"{EXPORT_FOLDER}_{safe_lake_name}_{ym_year}"


                task = ee.batch.Export.image.toDrive(
                    image=image,
                    region=region,
                    folder=folder_path,
                    description=filename,
                    fileNamePrefix=filename,
                    scale=EXPORT_SCALE,
                    maxPixels=1e13
                )
                task.start()
                writer.writerow([lake_name, ym_year, month, filename + ".tif", folder_path])
                print(f"✅ 提交任务: {folder_path}/{filename}")
                time.sleep(SLEEP_BETWEEN_TASKS)

print("🎉 所有任务提交完毕。你可以在 Earth Engine Task 面板查看进度。\n导出图像将保存到你的 Google Drive → GSW_MonthlyHistory_<湖泊名>_<年份>/\n📄 索引 CSV 文件已生成：gsw_export_index.csv")

# ✅ 使用 Earth Engine 导出 monthly_history 图像（从第 55 个湖开始）+ CSV 索引生成（使用湖泊名称）
import ee
import time
import csv
from tqdm import tqdm

# 初始化 Earth Engine（需授权）
ee.Authenticate()
ee.Initialize(project='lake-462714')

# === 设置参数 ===
START_YEAR = 2000
END_YEAR = 2021
MONTHS_NORTH = [6, 7, 8]  # 北半球夏季
MONTHS_SOUTH = [12, 1, 2] # 南半球夏季（跨年）
EXPORT_SCALE = 30
SLEEP_BETWEEN_TASKS = 0.5
EXPORT_FOLDER = "GSW_MonthlyHistory"
INDEX_CSV = "gsw_export_index.csv"

# ✅ 使用湖泊名称 + 坐标（示例）
lake_info = [
    ("Namtso", [90.1, 30.2, 91.05, 31.1]),
    ("Yamdrok", [90.3, 28.65, 91.1, 29.45]),
    ("Manasarovar", [81.35, 30.4735, 81.683, 30.8735]),
    ("Siling Lake", [88.5, 31.4, 89.5, 32.2]),
    ("Gyaring Lake", [97.03, 34.8, 97.52, 35.1]),
    ("Puma Yumco", [90.2, 28.48, 90.55, 28.67]),
    ("Tangra Yumco", [86.3, 30.7, 86.85, 31.4]),
    ("Zhari Namco", [85.3, 30.7, 85.9, 31.1]),
    ("Qinghai Lake", [99.5, 36.5, 100.9, 37.3]),
    ("Lake Rakshastal", [81.1, 30.5, 81.35, 30.8735]),
    ("Bosten Lake", [86.6, 41.8, 87.44, 42.25]),
    ("Sayram Lake", [80.9806, 44.4083, 81.3806, 44.8083]),
    ("Ebinur Lake", [82.7, 44.6555, 83.1619, 45.0555]),
    ("Ailik Lake", [85.7, 45.86, 85.9, 46]),
    ("Lake Barkol", [92.6715, 43.5619, 92.8715, 43.7619]),
    ("Tianchi", [88.11, 43.9, 88.15, 43.87]),
    ("Lake Ulungur", [87.0126, 47.015, 87.6, 47.43]),
    ("Lake Ayakkum", [89.05, 37.3323, 89.95, 37.7323]),
    ("Lake Victoria", [31.5, 0.7, 34.9, -3]),
    ("Lake Tanganyika", [28.8, -9, 31.2, -3.2]),
    ("Lake Malawi", [33.8016, -14.45, 35.31, -9.4606]),
    ("Lake Albert", [30.3, 1, 31.5, 2.7]),
    ("Lake Chad", [13.7802, 12.77, 14.7802, 13.28]),
    ("Lake Turkana", [35.743, 2.3259, 36.743, 4.7259]),
    ("Lake Kivu", [28.8277, -2.5419, 29.4277, -1.4819]),
    ("Lake Edward", [29.25, -0.7, 29.95, -0.04]),
    ("Lake Mweru", [28.2422, -9.629, 29.2422, -8.429]),
    ("Lake Rukwa", [31.4553, -8.6651, 33.0553, -7.3651]),
    ("Lake Biwa", [135.8226, 34.9686, 136.2826, 35.5186]),
    ("Poyang Lake", [115.7546, 28.3859, 116.8046, 29.7859]),
    ("Dongting Lake", [112.6968, 28.8147, 113.1968, 29.5647]),
    ("Taihu Lake", [119.8417, 30.8889, 120.6817, 31.5489]),
    ("Hulun Lake", [116.9006, 48.5489, 117.8006, 49.3889]),
    ("Chagan Lake", [123.8383, 45.1325, 124.4483, 45.4625]),
    ("Dianchi Lake", [102.519, 24.6467, 102.919, 25.0467]),
    ("Erhai Lake", [99.9811, 25.5831, 100.3811, 25.9831]),
    ("Hongze Lake", [118.1472, 33.0555, 118.8972, 33.7555]),
    ("Nansi Lake", [116.5545, 34.3802, 117.4545, 35.3802]),
    ("Lake Balkhash", [73.407, 44.8, 79.337, 46.8566]),
    ("Issyk-Kul", [76.1001, 42.0833, 78.4001, 42.7833]),
    ("Lake Zaysan", [82.8455, 47.588, 84.8455, 48.388]),
    ("Lake Sasykkol", [80.58, 46.35, 81.38, 46.7066]),
    ("Lake Alakol", [81.18, 45.65, 82.2, 46.5266]),
    ("Iskanderkul", [68.34, 39.09, 68.39, 39.08]),
    ("Aydar Lake", [65.8, 40.4162, 68.1, 41.1162]),
    ("Lake Tengiz", [68.6101, 50.13, 69.8101, 50.72]),
    ("Lake Markakol", [85.5, 48.65, 86.1, 48.85]),
    ("Aral Sea", [58.17, 44.18, 61.6, 46.8]),
    ("Lake Geneva", [6.1, 46.19, 7, 46.55]),
    ("Lake Constance", [8.85, 47.85, 9.79, 47.47]),
    ("Lake Ladoga", [29.62, 61.74, 33.2, 59.89]),
    ("Lake Onega", [33.62, 62.98, 36.63, 60.8]),
    ("Lake Neusiedl", [16.68, 47.65, 16.87, 47.94]),
    ("Lake Vänern", [12.26, 58.32, 14.15, 59.43]),
    ("Lake Vättern", [14.04, 57.75, 15, 58.84]),
    ("Loch Ness", [-4.27, 57.43, -4.7, 57.13]),
    ("Lake Windermere", [-2.98, 54.42, -2.91, 54.27]),
    ("Lake Maggiore", [8.49, 45.72, 8.86, 46.19]),
    ("Lago Janauacá", [-60.37, -3.44, -60.23, -3.32]),
    ("Lago Mirauá", [-60.6, -3.66, -60.44, -3.44]),
    ("Lake Ayapuá", [-62.06, -4.34, -62.44, -4.59]),
    ("Lake Amanã", [-64.39, -2.76, -64.84, -2.36]),
    ("Lago Tefé", [-65.04, -3.7, -64.68, -3.26]),
    ("Lago Grande de Curuai", [-54.93, -1.99, -55.51, -2.32]),
    ("Lago do Arari", [-57.23, -2.49, -57.17, -2.53]),
    ("Lago Mamori", [-60.17, -3.66, -60.0, -3.56]),
    ("Sebkha el Melah", [-1.4, 29.34, -1.1, 29.08]),
    ("Chott el Djerid", [8.88, 34.09, 7.75, 33.33]),
    ("Lake Bodélé", [16.99, 16.55, 18.89, 17.36]),
    ("Sebkha Sidi El Hani", [10.27, 35.66, 10.62, 35.37]),
    ("Sebkha de Timimoun", [-0.1, 28.9, 0.17, 29.15]),
    ("Lake Yoa", [20.49, 19.04, 20.52, 19.075]),
    ("Lake Katam", [20.5, 19, 20.55, 19.03]),
    ("Lake Ounianga Serir", [20.85, 18.91, 20.9, 18.96]),
    ("Lake Baikal", [110.18, 56.09, 103.53, 51.38]),
    ("Lake Khanka", [131.87, 45.39, 132.86, 44.52]),
    ("Lake Taimyr", [99.06, 73.8, 105.8, 75.26]),
    ("Lake Chany", [77.3, 54.57, 78.11, 55.09]),
    ("Lake Bustakh", [141.59, 72.43, 142.36, 72.62]),
    ("Lake Labynkyr", [143.55, 62.57, 143.68, 62.28]),
    ("Lake Pekulney", [176.86, 62.88, 177.57, 62.55]),
    ("Lake Uvs", [92.16, 49.95, 93.75, 50.71]),
    ("Lake Ozhogino", [146.38, 69.32, 146.93, 69.05]),
    ("Lake Yessey", [102.09, 68.55, 102.66, 68.31]),
    ("Supraglacial Lakes", [-52.04, 67.11, -51.7, 67.2]),
    ("Lake Ilulissat", [-51.07, 69.221, -51.09, 69.227]),
    ("Lake Amitsup Tasia", [-50.5, 70.06, -50.37, 70.14]),
    ("Lake Sanningasoq", [-50.67, 67.1, -50.47, 67.05]),
    ("Lake Aajuitsup Tasia", [-50.5, 67.07, -50.29, 67.11]),
    ("Lake Ferguson", [-50.71, 66.99, -50.57, 66.95]),
    ("Lake Tasersuaq", [-52.18, 66.96, -51.47, 67.06]),
    ("Lake Eyre", [136.64, -27.79, 138.09, -29.53]),
    ("Lake Torrens", [137.07, -30.12, 138.18, -31.98]),
    ("Lake Gairdner", [135.31, -31.0, 136.36, -32.38]),
    ("Lake Frome", [140.09, -30.21, 139.49, -31.16]),
    ("Lake Amadeus", [130.34, -24.46, 131.51, -25.0]),
    ("Lake Disappointment", [122.55, -23.71, 123.24, -23.18]),
    ("Lake Carnegie", [121.92, -25.94, 123.23, -26.6]),
    ("Lake Mackay", [128.23, -22.7, 129.29, -21.97]),
    ("Lake Gregory", [127.24, -20.06, 127.53, -20.31]),
]

# ✅ 只从第 55 个湖开始导出
lake_info = lake_info[45:55]  # 从 index 54 开始（第 55 个湖）

# 准备 CSV 索引文件
with open(INDEX_CSV, mode='w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["lake_name", "year", "month", "filename", "folder"])

    for lake_name, (lon_min, lat_min, lon_max, lat_max) in tqdm(lake_info):
        region = ee.Geometry.Rectangle([lon_min, lat_min, lon_max, lat_max])
        lat_center = (lat_min + lat_max) / 2
        months = MONTHS_NORTH if lat_center >= 0 else MONTHS_SOUTH

        for year in range(START_YEAR, END_YEAR + 1):
            for month in months:
                ym_year = year if not (lat_center < 0 and month < 3) else year + 1
                date_str = f"{ym_year}-{month:02d}-15"
                image = ee.ImageCollection("JRC/GSW1_4/MonthlyHistory") \
                    .filterDate(date_str, ee.Date(date_str).advance(1, 'month')) \
                    .mosaic().select('water').unmask(0).multiply(127).toUint8()

                safe_lake_name = sanitize_filename(lake_name)
                filename = f"{safe_lake_name}_{ym_year}{month:02d}"
                folder_path = f"{EXPORT_FOLDER}_{safe_lake_name}_{ym_year}"


                task = ee.batch.Export.image.toDrive(
                    image=image,
                    region=region,
                    folder=folder_path,
                    description=filename,
                    fileNamePrefix=filename,
                    scale=EXPORT_SCALE,
                    maxPixels=1e13
                )
                task.start()
                writer.writerow([lake_name, ym_year, month, filename + ".tif", folder_path])
                print(f"✅ 提交任务: {folder_path}/{filename}")
                time.sleep(SLEEP_BETWEEN_TASKS)

print("🎉 所有任务提交完毕。你可以在 Earth Engine Task 面板查看进度。\n导出图像将保存到你的 Google Drive → GSW_MonthlyHistory_<湖泊名>_<年份>/\n📄 索引 CSV 文件已生成：gsw_export_index.csv")

# ✅ 使用 Earth Engine 导出 monthly_history 图像（从第 55 个湖开始）+ CSV 索引生成（使用湖泊名称）
import ee
import time
import csv
from tqdm import tqdm

# 初始化 Earth Engine（需授权）
ee.Authenticate()
ee.Initialize(project='lake-462714')

# === 设置参数 ===
START_YEAR = 2000
END_YEAR = 2021
MONTHS_NORTH = [6, 7, 8]  # 北半球夏季
MONTHS_SOUTH = [12, 1, 2] # 南半球夏季（跨年）
EXPORT_SCALE = 30
SLEEP_BETWEEN_TASKS = 0.5
EXPORT_FOLDER = "GSW_MonthlyHistory"
INDEX_CSV = "gsw_export_index.csv"

# ✅ 使用湖泊名称 + 坐标（示例）
lake_info = [
    ("Namtso", [90.1, 30.2, 91.05, 31.1]),
    ("Yamdrok", [90.3, 28.65, 91.1, 29.45]),
    ("Manasarovar", [81.35, 30.4735, 81.683, 30.8735]),
    ("Siling Lake", [88.5, 31.4, 89.5, 32.2]),
    ("Gyaring Lake", [97.03, 34.8, 97.52, 35.1]),
    ("Puma Yumco", [90.2, 28.48, 90.55, 28.67]),
    ("Tangra Yumco", [86.3, 30.7, 86.85, 31.4]),
    ("Zhari Namco", [85.3, 30.7, 85.9, 31.1]),
    ("Qinghai Lake", [99.5, 36.5, 100.9, 37.3]),
    ("Lake Rakshastal", [81.1, 30.5, 81.35, 30.8735]),
    ("Bosten Lake", [86.6, 41.8, 87.44, 42.25]),
    ("Sayram Lake", [80.9806, 44.4083, 81.3806, 44.8083]),
    ("Ebinur Lake", [82.7, 44.6555, 83.1619, 45.0555]),
    ("Ailik Lake", [85.7, 45.86, 85.9, 46]),
    ("Lake Barkol", [92.6715, 43.5619, 92.8715, 43.7619]),
    ("Tianchi", [88.11, 43.9, 88.15, 43.87]),
    ("Lake Ulungur", [87.0126, 47.015, 87.6, 47.43]),
    ("Lake Ayakkum", [89.05, 37.3323, 89.95, 37.7323]),
    ("Lake Victoria", [31.5, 0.7, 34.9, -3]),
    ("Lake Tanganyika", [28.8, -9, 31.2, -3.2]),
    ("Lake Malawi", [33.8016, -14.45, 35.31, -9.4606]),
    ("Lake Albert", [30.3, 1, 31.5, 2.7]),
    ("Lake Chad", [13.7802, 12.77, 14.7802, 13.28]),
    ("Lake Turkana", [35.743, 2.3259, 36.743, 4.7259]),
    ("Lake Kivu", [28.8277, -2.5419, 29.4277, -1.4819]),
    ("Lake Edward", [29.25, -0.7, 29.95, -0.04]),
    ("Lake Mweru", [28.2422, -9.629, 29.2422, -8.429]),
    ("Lake Rukwa", [31.4553, -8.6651, 33.0553, -7.3651]),
    ("Lake Biwa", [135.8226, 34.9686, 136.2826, 35.5186]),
    ("Poyang Lake", [115.7546, 28.3859, 116.8046, 29.7859]),
    ("Dongting Lake", [112.6968, 28.8147, 113.1968, 29.5647]),
    ("Taihu Lake", [119.8417, 30.8889, 120.6817, 31.5489]),
    ("Hulun Lake", [116.9006, 48.5489, 117.8006, 49.3889]),
    ("Chagan Lake", [123.8383, 45.1325, 124.4483, 45.4625]),
    ("Dianchi Lake", [102.519, 24.6467, 102.919, 25.0467]),
    ("Erhai Lake", [99.9811, 25.5831, 100.3811, 25.9831]),
    ("Hongze Lake", [118.1472, 33.0555, 118.8972, 33.7555]),
    ("Nansi Lake", [116.5545, 34.3802, 117.4545, 35.3802]),
    ("Lake Balkhash", [73.407, 44.8, 79.337, 46.8566]),
    ("Issyk-Kul", [76.1001, 42.0833, 78.4001, 42.7833]),
    ("Lake Zaysan", [82.8455, 47.588, 84.8455, 48.388]),
    ("Lake Sasykkol", [80.58, 46.35, 81.38, 46.7066]),
    ("Lake Alakol", [81.18, 45.65, 82.2, 46.5266]),
    ("Iskanderkul", [68.34, 39.09, 68.39, 39.08]),
    ("Aydar Lake", [65.8, 40.4162, 68.1, 41.1162]),
    ("Lake Tengiz", [68.6101, 50.13, 69.8101, 50.72]),
    ("Lake Markakol", [85.5, 48.65, 86.1, 48.85]),
    ("Aral Sea", [58.17, 44.18, 61.6, 46.8]),
    ("Lake Geneva", [6.1, 46.19, 7, 46.55]),
    ("Lake Constance", [8.85, 47.85, 9.79, 47.47]),
    ("Lake Ladoga", [29.62, 61.74, 33.2, 59.89]),
    ("Lake Onega", [33.62, 62.98, 36.63, 60.8]),
    ("Lake Neusiedl", [16.68, 47.65, 16.87, 47.94]),
    ("Lake Vänern", [12.26, 58.32, 14.15, 59.43]),
    ("Lake Vättern", [14.04, 57.75, 15, 58.84]),
    ("Loch Ness", [-4.27, 57.43, -4.7, 57.13]),
    ("Lake Windermere", [-2.98, 54.42, -2.91, 54.27]),
    ("Lake Maggiore", [8.49, 45.72, 8.86, 46.19]),
    ("Lago Janauacá", [-60.37, -3.44, -60.23, -3.32]),
    ("Lago Mirauá", [-60.6, -3.66, -60.44, -3.44]),
    ("Lake Ayapuá", [-62.06, -4.34, -62.44, -4.59]),
    ("Lake Amanã", [-64.39, -2.76, -64.84, -2.36]),
    ("Lago Tefé", [-65.04, -3.7, -64.68, -3.26]),
    ("Lago Grande de Curuai", [-54.93, -1.99, -55.51, -2.32]),
    ("Lago do Arari", [-57.23, -2.49, -57.17, -2.53]),
    ("Lago Mamori", [-60.17, -3.66, -60.0, -3.56]),
    ("Sebkha el Melah", [-1.4, 29.34, -1.1, 29.08]),
    ("Chott el Djerid", [8.88, 34.09, 7.75, 33.33]),
    ("Lake Bodélé", [16.99, 16.55, 18.89, 17.36]),
    ("Sebkha Sidi El Hani", [10.27, 35.66, 10.62, 35.37]),
    ("Sebkha de Timimoun", [-0.1, 28.9, 0.17, 29.15]),
    ("Lake Yoa", [20.49, 19.04, 20.52, 19.075]),
    ("Lake Katam", [20.5, 19, 20.55, 19.03]),
    ("Lake Ounianga Serir", [20.85, 18.91, 20.9, 18.96]),
    ("Lake Baikal", [110.18, 56.09, 103.53, 51.38]),
    ("Lake Khanka", [131.87, 45.39, 132.86, 44.52]),
    ("Lake Taimyr", [99.06, 73.8, 105.8, 75.26]),
    ("Lake Chany", [77.3, 54.57, 78.11, 55.09]),
    ("Lake Bustakh", [141.59, 72.43, 142.36, 72.62]),
    ("Lake Labynkyr", [143.55, 62.57, 143.68, 62.28]),
    ("Lake Pekulney", [176.86, 62.88, 177.57, 62.55]),
    ("Lake Uvs", [92.16, 49.95, 93.75, 50.71]),
    ("Lake Ozhogino", [146.38, 69.32, 146.93, 69.05]),
    ("Lake Yessey", [102.09, 68.55, 102.66, 68.31]),
    ("Supraglacial Lakes", [-52.04, 67.11, -51.7, 67.2]),
    ("Lake Ilulissat", [-51.07, 69.221, -51.09, 69.227]),
    ("Lake Amitsup Tasia", [-50.5, 70.06, -50.37, 70.14]),
    ("Lake Sanningasoq", [-50.67, 67.1, -50.47, 67.05]),
    ("Lake Aajuitsup Tasia", [-50.5, 67.07, -50.29, 67.11]),
    ("Lake Ferguson", [-50.71, 66.99, -50.57, 66.95]),
    ("Lake Tasersuaq", [-52.18, 66.96, -51.47, 67.06]),
    ("Lake Eyre", [136.64, -27.79, 138.09, -29.53]),
    ("Lake Torrens", [137.07, -30.12, 138.18, -31.98]),
    ("Lake Gairdner", [135.31, -31.0, 136.36, -32.38]),
    ("Lake Frome", [140.09, -30.21, 139.49, -31.16]),
    ("Lake Amadeus", [130.34, -24.46, 131.51, -25.0]),
    ("Lake Disappointment", [122.55, -23.71, 123.24, -23.18]),
    ("Lake Carnegie", [121.92, -25.94, 123.23, -26.6]),
    ("Lake Mackay", [128.23, -22.7, 129.29, -21.97]),
    ("Lake Gregory", [127.24, -20.06, 127.53, -20.31]),
]

# ✅ 只从第 55 个湖开始导出
lake_info = lake_info[78:]  # 从 index 54 开始（第 55 个湖）

# 准备 CSV 索引文件
with open(INDEX_CSV, mode='w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["lake_name", "year", "month", "filename", "folder"])

    for lake_name, (lon_min, lat_min, lon_max, lat_max) in tqdm(lake_info):
        region = ee.Geometry.Rectangle([lon_min, lat_min, lon_max, lat_max])
        lat_center = (lat_min + lat_max) / 2
        months = MONTHS_NORTH if lat_center >= 0 else MONTHS_SOUTH

        for year in range(START_YEAR, END_YEAR + 1):
            for month in months:
                ym_year = year if not (lat_center < 0 and month < 3) else year + 1
                date_str = f"{ym_year}-{month:02d}-15"
                image = ee.ImageCollection("JRC/GSW1_4/MonthlyHistory") \
                    .filterDate(date_str, ee.Date(date_str).advance(1, 'month')) \
                    .mosaic().select('water').unmask(0).multiply(127).toUint8()

                safe_lake_name = sanitize_filename(lake_name)
                filename = f"{safe_lake_name}_{ym_year}{month:02d}"
                folder_path = f"{EXPORT_FOLDER}_{safe_lake_name}_{ym_year}"


                task = ee.batch.Export.image.toDrive(
                    image=image,
                    region=region,
                    folder=folder_path,
                    description=filename,
                    fileNamePrefix=filename,
                    scale=EXPORT_SCALE,
                    maxPixels=1e13
                )
                task.start()
                writer.writerow([lake_name, ym_year, month, filename + ".tif", folder_path])
                print(f"✅ 提交任务: {folder_path}/{filename}")
                time.sleep(SLEEP_BETWEEN_TASKS)

print("🎉 所有任务提交完毕。你可以在 Earth Engine Task 面板查看进度。\n导出图像将保存到你的 Google Drive → GSW_MonthlyHistory_<湖泊名>_<年份>/\n📄 索引 CSV 文件已生成：gsw_export_index.csv")